version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: tmux-orchestrator-db
    environment:
      POSTGRES_DB: orchestrator
      POSTGRES_USER: orchestrator
      POSTGRES_PASSWORD: orchestrator_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orchestrator"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: tmux-orchestrator-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  api-gateway:
    image: tiangolo/uvicorn-gunicorn-fastapi:python3.11
    container_name: tmux-orchestrator-api
    ports:
      - "8080:80"
    environment:
      - DATABASE_URL=postgresql://orchestrator:orchestrator_pass@postgres:5432/orchestrator
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./api:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 80 --reload

  dashboard:
    image: node:18-alpine
    container_name: tmux-orchestrator-dashboard
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
    volumes:
      - ./dashboard:/app
    working_dir: /app
    command: sh -c "npm install && npm run dev"
    depends_on:
      - api-gateway

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: tmux-orchestrator-network